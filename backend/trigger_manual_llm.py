#!/usr/bin/env python3
"""
Trigger manual para an√°lise de transa√ß√µes e gera√ß√£o de sugest√µes com LLM.

Este script permite executar manualmente a an√°lise de IA para um usu√°rio espec√≠fico,
gerando sugest√µes baseadas em suas transa√ß√µes recentes.

Uso:
    python trigger_manual_llm.py [username]
    
    Se username n√£o for fornecido, analisa todos os usu√°rios ativos.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timezone
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import User, Transaction, Suggestion, SuggestionType, SuggestionStatus
from app.services.ai_engine import AIEngine
from app.database import SessionLocal
import json


def print_separator():
    """Imprime separador visual."""
    print("=" * 80)


def print_transaction_summary(transactions):
    """Imprime resumo das transa√ß√µes."""
    if not transactions:
        print("   üìä Nenhuma transa√ß√£o encontrada")
        return
    
    # Agregar por categoria
    category_totals = {}
    type_totals = {}
    
    for t in transactions:
        # Por categoria
        if t.category not in category_totals:
            category_totals[t.category] = {"count": 0, "total": 0}
        category_totals[t.category]["count"] += 1
        category_totals[t.category]["total"] += float(t.amount)
        
        # Por tipo
        if t.type not in type_totals:
            type_totals[t.type] = {"count": 0, "total": 0}
        type_totals[t.type]["count"] += 1
        type_totals[t.type]["total"] += float(t.amount)
    
    print(f"   üìä Total de transa√ß√µes: {len(transactions)}")
    print("\n   üí∞ Por tipo:")
    for type_name, data in sorted(type_totals.items()):
        print(f"      - {type_name}: {data['count']} transa√ß√µes, R$ {data['total']:.2f}")
    
    print("\n   üìÇ Por categoria (top 5):")
    sorted_categories = sorted(category_totals.items(), key=lambda x: x[1]["total"], reverse=True)[:5]
    for cat, data in sorted_categories:
        print(f"      - {cat}: {data['count']} transa√ß√µes, R$ {data['total']:.2f}")


def analyze_single_user(db, username):
    """Analisa um usu√°rio espec√≠fico."""
    print(f"\nüîç Buscando usu√°rio: {username}")
    
    user = db.query(User).filter(User.username == username).first()
    if not user:
        print(f"‚ùå Usu√°rio '{username}' n√£o encontrado!")
        return False
    
    print(f"‚úÖ Usu√°rio encontrado: {user.username} ({user.email})")
    
    # Verificar perfil
    if not user.profile:
        print("‚ö†Ô∏è  Usu√°rio sem perfil configurado")
    else:
        profile = user.profile
        print(f"üë§ Perfil: {profile.name}")
        if profile.birth_date:
            print(f"   - Anivers√°rio: {profile.birth_date.strftime('%d/%m')}")
        if profile.spouse_name:
            print(f"   - C√¥njuge: {profile.spouse_name}")
            if profile.spouse_birth_date:
                print(f"   - Anivers√°rio c√¥njuge: {profile.spouse_birth_date.strftime('%d/%m')}")
    
    # Buscar transa√ß√µes recentes
    print("\nüìà Transa√ß√µes recentes (√∫ltimos 90 dias):")
    from datetime import timedelta
    ninety_days_ago = datetime.now(timezone.utc) - timedelta(days=90)
    recent_transactions = db.query(Transaction).filter(
        Transaction.user_id == user.id,
        Transaction.date >= ninety_days_ago
    ).order_by(Transaction.date.desc()).all()
    
    print_transaction_summary(recent_transactions)
    
    # Buscar sugest√µes existentes
    existing_pending = db.query(Suggestion).filter(
        Suggestion.user_id == user.id,
        Suggestion.status == SuggestionStatus.PENDING
    ).count()
    
    print(f"\nüí° Sugest√µes pendentes atuais: {existing_pending}")
    
    # Executar an√°lise de IA
    print("\nü§ñ Executando an√°lise de IA...")
    print_separator()
    
    try:
        engine = AIEngine(db)
        suggestions = engine.analyze_user(user)
        
        if not suggestions:
            print("‚ö†Ô∏è  Nenhuma nova sugest√£o gerada")
            return True
        
        print(f"\n‚ú® {len(suggestions)} sugest√µes geradas:\n")
        
        # Salvar sugest√µes
        saved_count = 0
        for i, suggestion_data in enumerate(suggestions, 1):
            # Verificar se j√° existe sugest√£o similar
            existing = db.query(Suggestion).filter(
                Suggestion.user_id == user.id,
                Suggestion.content == suggestion_data['content'],
                Suggestion.status.in_([SuggestionStatus.PENDING, SuggestionStatus.ACCEPTED, SuggestionStatus.SNOOZED])
            ).first()
            
            if existing:
                print(f"   {i}. ‚è≠Ô∏è  Sugest√£o similar j√° existe (ignorada)")
                continue
            
            # Criar nova sugest√£o
            # IMPORTANTE: Sempre salvar como strings min√∫sculas no banco
            if hasattr(suggestion_data.get('type'), 'value'):
                # √â um objeto Enum, pegar o valor
                suggestion_data['type'] = suggestion_data['type'].value
            else:
                # √â uma string, garantir que seja min√∫scula
                suggestion_data['type'] = str(suggestion_data['type']).lower()
            
            # Garantir que status seja 'pending' (min√∫sculo)
            if 'status' not in suggestion_data:
                suggestion_data['status'] = 'pending'
            elif hasattr(suggestion_data.get('status'), 'value'):
                suggestion_data['status'] = suggestion_data['status'].value
            else:
                suggestion_data['status'] = str(suggestion_data['status']).lower()
            
            new_suggestion = Suggestion(
                user_id=user.id,
                **suggestion_data
            )
            db.add(new_suggestion)
            saved_count += 1
            
            # Exibir detalhes
            type_str = suggestion_data['type'].value if hasattr(suggestion_data['type'], 'value') else str(suggestion_data['type'])
            print(f"   {i}. [{type_str}] (Prioridade: {suggestion_data['priority']})")
            print(f"      üìù {suggestion_data['content']}")
            print(f"      üìÖ Agendada para: {suggestion_data['scheduled_date'].strftime('%d/%m/%Y %H:%M')}")
            
            # Mostrar contexto se dispon√≠vel
            if suggestion_data.get('context_data'):
                try:
                    context = json.loads(suggestion_data['context_data'])
                    if context.get('reasoning'):
                        print(f"      üí≠ Raz√£o: {context['reasoning']}")
                    if context.get('generated_by') == 'claude':
                        print(f"      ü§ñ Gerada por: Claude ({context.get('model', 'unknown')})")
                except:
                    pass
            print()
        
        # Salvar no banco
        if saved_count > 0:
            db.commit()
            print(f"‚úÖ {saved_count} novas sugest√µes salvas no banco de dados")
        else:
            print("‚ÑπÔ∏è  Todas as sugest√µes geradas j√° existiam")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante an√°lise: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        return False


def analyze_all_users(db):
    """Analisa todos os usu√°rios ativos."""
    print("\nüìã Analisando todos os usu√°rios ativos...")
    
    users = db.query(User).filter(User.is_active == True).all()
    print(f"üë• {len(users)} usu√°rios ativos encontrados")
    
    success_count = 0
    error_count = 0
    
    for user in users:
        print_separator()
        if analyze_single_user(db, user.username):
            success_count += 1
        else:
            error_count += 1
    
    print_separator()
    print(f"\nüìä Resumo final:")
    print(f"   ‚úÖ Sucesso: {success_count} usu√°rios")
    print(f"   ‚ùå Erros: {error_count} usu√°rios")


def main():
    """Fun√ß√£o principal."""
    print("üöÄ Trigger Manual de An√°lise LLM")
    print("================================")
    
    db = SessionLocal()
    
    try:
        if len(sys.argv) > 1:
            # Analisar usu√°rio espec√≠fico
            username = sys.argv[1]
            analyze_single_user(db, username)
        else:
            # Analisar todos os usu√°rios
            print("\nNenhum usu√°rio especificado. Analisando todos os usu√°rios ativos...")
            print("Para analisar um usu√°rio espec√≠fico, use: python trigger_manual_llm.py [username]")
            
            response = input("\nDeseja continuar? (s/n): ")
            if response.lower() == 's':
                analyze_all_users(db)
            else:
                print("Opera√ß√£o cancelada.")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Opera√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()
        print("\n‚úÖ Conex√£o com banco de dados fechada")


if __name__ == "__main__":
    main()